name: Deploy CodeChecker VSCode extension

# Triggers the workflow when a new release is published.
on:
  release:
    types: [published]

jobs:
  build:
    name: Create extension
    runs-on: ubuntu-18.04

    # Each registry should have the following fields:
    #   - name: unique extension id.
    #   - registryUrl: the created vsix package will be published to this registry.
    #   - token: github secret name which will be used to publish the created package.
    strategy:
      matrix:
        registry: [open-vsx, vs-marketplace]
        include:
          - registry: open-vsx
            name: codechecker
            registryUrl: https://open-vsx.org
            token: OPEN_VSX_TOKEN
          - registry: vs-marketplace
            name: vscode-codechecker
            registryUrl: https://marketplace.visualstudio.com
            token: VS_MARKETPLACE_TOKEN

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: yarn run test

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create vsix package
        if: success()
        id: build
        run: |
          sed -i 's/"name": "codechecker"/"name": "${{ matrix.name }}"/' package.json
          yarn run vsce package --no-git-tag-version --yarn ${{ steps.get_version.outputs.VERSION }}
          echo ::set-output name=vsixPath::$(readlink -f *.vsix)

      - name: Create vsix artifact
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.registry }}-package
          path: ${{ steps.build.outputs.vsixPath }}

      - name: Publish package
        if: success()
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ secrets[matrix.token] }}
          registryUrl: ${{ matrix.registryUrl }}
          extensionFile: ${{ steps.build.outputs.vsixPath }}
